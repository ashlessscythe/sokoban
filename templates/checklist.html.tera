<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Checklist</title>
    <link rel="stylesheet" href="../static/css/style.css" />
    <script src="../static/js/helpers.js"></script>
  </head>
  <body>
    <div class="table-title" style="display: flex; align-items: center">
      <button
        class="circle-button"
        onclick="location.href='/home'"
        style="
          display: block;
          margin-bottom: 20px;
          margin-right: 20px;
          width: 50px;
          height: 50px;
          border-radius: 50%;
          overflow: hidden;
          padding: 0;
          border: none;
        "
      >
        <img
          src="../static/images/back_arrow.png"
          alt="Go to Homepage"
          style="width: 100%; height: auto"
        />
      </button>
      <h1>Checklist</h1>
      <!-- Dropdown for filtering by department -->
      <select class="departmentFilter" id="departmentFilter" onchange="filterByDepartment()">
        <option value="">All Departments</option>
        {% for dept_name in unique_departments %}
          <option value="{{ dept_name }}">{{ dept_name }}</option>
        {% endfor %}
      </select>
    <button class="refresh-button" onclick="callReload()">
      Refresh List
    </button>
    </div>
    <div>
      <div id="message-container"></div>
      <div id="toast-container"></div>
    </div>
    <div
      class="table-container"
    >
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Department</th>
            <th>
              Found
              <div style="font-size: smaller; color: gray">
                (in testing phase)
              </div>
            </th>
            <th>Update</th>
          </tr>
        </thead>
        <tbody id="table-body">
          {% for user_status in user_statuses %}
          <tr>
            <td>{{ user_status.name }}</td>
            <td>{{ user_status.dept_name }}</td>
            <td>
              <input
                type="checkbox"
                name="found_status"
                value="found"
                data-user-id="{{ user_status.temp_id }}"
                data-user-name="{{ user_status.name }}"
                class="status-checkbox"
                {%
                if
                user_status.found
                %}checked{%
                endif
                %}
              />
            </td>
            <td>
              <button
                class="centered-button"
                type="button"
                onclick="sendUpdateRow(event)"
              >Set Status 
              </button>
            </td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    </div>
    <button
      class="block-button"
      onclick="location.href='/home'"
      style="position: fixed; bottom: 0"
    >
      Go to Homepage
    </button>
  </body>
</html>

<script>
  startInactivityTimer(60000);
  console.log(
    "Number of rows: " + document.getElementById("table-body").rows.length
  );

  // Load saved department and set filter on page load
  window.onload = function() {
    const savedDepartment = localStorage.getItem('selectedDepartment');
    if (savedDepartment) {
      document.getElementById('departmentFilter').value = savedDepartment;
      filterByDepartment();
    }
  };

  // for drop-down
  function filterByDepartment() {
    const selectedDepartment = document.getElementById('departmentFilter').value;
    localStorage.setItem('selectedDepartment', selectedDepartment);
    const tableRows = document.getElementById('table-body').rows;

    for (let i = 0; i < tableRows.length; i++) {
      const deptCell = tableRows[i].cells[1]; // Assuming department is the second cell
      if (selectedDepartment === "" || deptCell.textContent === selectedDepartment) {
        tableRows[i].style.display = ""; // Show row
      } else {
        tableRows[i].style.display = "none"; // Hide row
      }
    }
  }

  // reload with toast
  function callReload() {
    const currentDepartment = document.getElementById('departmentFilter').value;
    localStorage.setItem('selectedDepartment', currentDepartment);
    localStorage.setItem('showRefreshToast', 'true');
  
    // Show "Refreshing..." message
    displayInfoToast("Refreshing...");
  
    // Reload the page after a short delay
    setTimeout(() => {
      location.reload();
    }, 500);
  }

  // send update for single table row
  function sendUpdateRow(event) {
    // Determine the row where the button was clicked
    const row = event.target.closest("tr");
    const checkbox = row.querySelector(".status-checkbox");
    const userId = checkbox.dataset.userId;
    const userName = checkbox.dataset.userName;
    const found = checkbox.checked;

    // Call your existing sendUpdate function with the correct parameters
    sendUpdate(userId, found, name)
      .then((response) => {
        if (response && response.ok) {
          console.log(`Update successful for user ID: ${userName}`);
          displaySuccessToast(`Update successful for user ID: ${userName}`);
        } else {
          console.error(`Failed to update for user ID: ${userName}`);
          displayErrorMessage(`Failed to update for user ID: ${userName}`);
        }
      })
      .catch((error) => {
        console.error("Error updating user status", error);
        displayErrorMessage("Error updating user status");
      });
  }

  // Iterate and add event listener to each checkbox
  async function sendUpdates() {
    const checkboxes = document.querySelectorAll(".status-checkbox");
    for (const checkbox of checkboxes) {
      const userId = checkbox.dataset.userId;
      const found = checkbox.checked; // true if checked, false if not
      const userName = checkbox.dataset.userName;
      const response = await sendUpdate(userId, found, name);

      if (response.ok) {
        // If response status is 200-299
        console.log(`Update successful for user ID: ${userName}`);
        displaySuccessMessage(`Update successful for user ID: ${userName}`);
      } else {
        // Handle non-successful responses
        console.error(`Failed to update for user ID: ${userName}`);
        displayErrorMessage(`Failed to update for user ID: ${userName}`);
      }
    }
  }

  // Function to display info toast
  function displayInfoToast(message) {
    const toastContainer = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = 'toast info-toast'; // Add 'info-toast' class for styling
    toast.innerText = message;
    toastContainer.appendChild(toast);
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 2000); // Remove after 2 seconds to ensure it's seen before reload
  }

  // Function to display a success message
  function displaySuccessMessage(message) {
    const messageContainer = document.getElementById("message-container"); // Make sure you have this container in your HTML
    const successMessageElement = document.createElement("div");
    successMessageElement.textContent = message;
    successMessageElement.classList.add("success-message"); // Add any classes for styling the message
    messageContainer.appendChild(successMessageElement);

    // Optionally, remove the message after some time
    setTimeout(() => {
      messageContainer.removeChild(successMessageElement);
    }, 2000); // Remove after 2 seconds
  }

  function displaySuccessToast(message) {
    const toastContainer = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.innerText = message;

    // Append the toast to the container
    toastContainer.appendChild(toast);

    // Automatically remove the toast after 4 seconds
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 4000);
  }

  // Function to display an error message (similar to the success message)
  function displayErrorMessage(message) {
    // Implement similar to displaySuccessMessage
    const messageContainer = document.getElementById("message-container"); // Make sure you have this container in your HTML
    const errorMessageElement = document.createElement("div");
    errorMessageElement.textContent = message;
    errorMessageElement.classList.add("error-message"); // Add any classes for styling the message
    messageContainer.appendChild(errorMessageElement);

    // Optionally, remove the message after some time
    setTimeout(() => {
      messageContainer.removeChild(errorMessageElement);
    }, 2000); // Remove after 2 seconds
  }

  function displayErrorToast(message) {
    const toastContainer = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.innerText = message;

    // Append the toast to the container
    toastContainer.appendChild(toast);

    // Automatically remove the toast after 4 seconds
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 4000);
  }

  // Check for refresh toast on page load
  document.addEventListener('DOMContentLoaded', () => {
    if (localStorage.getItem('showRefreshToast') === 'true') {
      displaySuccessToast("List refreshed");
      localStorage.removeItem('showRefreshToast');
    }
  });

  // send update to server
  async function sendUpdate(userId, found, userName) {
    const url = "/status/update-found-status";
    const drillId = new Date().toISOString().replace(/-/g, "").substring(0, 8); // Default drill ID in yyyymmdd format
    console.log("url is", url);
    console.log(
      "Updating status for user",
      userName,
      "to",
      found,
      "for drill",
      drillId
    );
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: userId,
          drill_id: parseInt(drillId, 10),
          found: found,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response;
    } catch (error) {
      console.error("There was an error!", error);
    }
  }

  // Example function to handle checkbox change
  function handleFoundCheckbox(userId, isChecked) {
    // Send the found status to the server
    fetch("/update-found-status", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ userId, found: isChecked }),
    })
      .then((response) => {
        // handle the response
      })
      .catch((error) => {
        // handle any errors
      });
  }

</script>
