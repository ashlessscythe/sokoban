<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Checklist</title>
    <link rel="stylesheet" href="../static/css/style.css" />
    <script src="../static/js/helpers.js"></script>
  </head>
  <body>
    <div class="table-title" style="display: flex; align-items: center">
      <button
        class="circle-button"
        onclick="location.href='/home'"
        style="
          display: block;
          margin-bottom: 20px;
          margin-right: 20px;
          width: 50px;
          height: 50px;
          border-radius: 50%;
          overflow: hidden;
          padding: 0;
          border: none;
        "
      >
        <img
          src="../static/images/back_arrow.png"
          alt="Go to Homepage"
          style="width: 100%; height: auto"
        />
      </button>
      <h1>Checklist</h1>
      <!-- Dropdown for filtering by department -->
      <select class="departmentFilter" id="departmentFilter" onchange="filterByDepartment()">
        <option value="">All Departments</option>
        {% for dept_name in unique_departments %}
          <option value="{{ dept_name }}">{{ dept_name }}</option>
        {% endfor %}
      </select>
      <button class="refresh-button" onclick="callReload()">
        Refresh List
      </button>
    </div>
    <div
      class="table-container"
      style="
        position: relative;
        height: 60vh;
        min-height: 200px;
        overflow: auto;
      "
    >
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Department</th>
            <th>
              Found
              <div style="font-size: smaller; color: gray">
                (in testing phase)
              </div>
            </th>
            <th>Update</th>
          </tr>
        </thead>
        <tbody id="table-body">
          {% for user_status in user_statuses %}
          <tr>
            <td>{{ user_status.name }}</td>
            <td>{{ user_status.dept_name }}</td>
            <td>
              <input
                type="checkbox"
                name="found_status"
                value="found"
                data-user-id="{{ user_status.temp_id }}"
                data-user-name="{{ user_status.name }}"
                class="status-checkbox"
                {%
                if
                user_status.found
                %}checked{%
                endif
                %}
              />
            </td>
            <td>
              <button
                class="centered-button"
                type="button"
                onclick="sendUpdateRow(event)"
              >Set Status 
              </button>
            </td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
      <div style="display: flex; justify-content: center; align-items: center;" id="message-container"></div>
      <div id="toast-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>
    </div>
    <button
      class="block-button"
      onclick="location.href='/home'"
      style="position: fixed; bottom: 0"
    >
      Go to Homepage
    </button>
  </body>
</html>

<script>
  startInactivityTimer(60000);
  console.log(
    "Number of rows: " + document.getElementById("table-body").rows.length
  );

  // for drop-down
  function filterByDepartment() {
    const selectedDepartment = document.getElementById('departmentFilter').value;
    const tableRows = document.getElementById('table-body').rows;

    for (let i = 0; i < tableRows.length; i++) {
      const deptCell = tableRows[i].cells[1]; // Assuming department is the second cell
      if (selectedDepartment === "" || deptCell.textContent === selectedDepartment) {
        tableRows[i].style.display = ""; // Show row
      } else {
        tableRows[i].style.display = "none"; // Hide row
      }
    }
  }

  // reload with toast
  function callReload() {
    location.reload();
    displaySuccessToast("List refreshed");
  }

  // send update for single table row
  function sendUpdateRow(event) {
    // Determine the row where the button was clicked
    const row = event.target.closest("tr");
    const checkbox = row.querySelector(".status-checkbox");
    const userId = checkbox.dataset.userId;
    const userName = checkbox.dataset.userName;
    const found = checkbox.checked;

    // Call your existing sendUpdate function with the correct parameters
    sendUpdate(userId, found, name)
      .then((response) => {
        if (response && response.ok) {
          console.log(`Update successful for user ID: ${userName}`);
          displaySuccessToast(`Update successful for user ID: ${userName}`);
        } else {
          console.error(`Failed to update for user ID: ${userName}`);
          displayErrorMessage(`Failed to update for user ID: ${userName}`);
        }
      })
      .catch((error) => {
        console.error("Error updating user status", error);
        displayErrorMessage("Error updating user status");
      });
  }

  // Iterate and add event listener to each checkbox
  async function sendUpdates() {
    const checkboxes = document.querySelectorAll(".status-checkbox");
    for (const checkbox of checkboxes) {
      const userId = checkbox.dataset.userId;
      const found = checkbox.checked; // true if checked, false if not
      const userName = checkbox.dataset.userName;
      const response = await sendUpdate(userId, found, name);

      if (response.ok) {
        // If response status is 200-299
        console.log(`Update successful for user ID: ${userName}`);
        displaySuccessMessage(`Update successful for user ID: ${userName}`);
      } else {
        // Handle non-successful responses
        console.error(`Failed to update for user ID: ${userName}`);
        displayErrorMessage(`Failed to update for user ID: ${userName}`);
      }
    }
  }
  // Function to display a success message
  function displaySuccessMessage(message) {
    const messageContainer = document.getElementById("message-container"); // Make sure you have this container in your HTML
    const successMessageElement = document.createElement("div");
    successMessageElement.textContent = message;
    successMessageElement.classList.add("success-message"); // Add any classes for styling the message
    messageContainer.appendChild(successMessageElement);

    // Optionally, remove the message after some time
    setTimeout(() => {
      messageContainer.removeChild(successMessageElement);
    }, 2000); // Remove after 2 seconds
  }

  function displaySuccessToast(message) {
    const toastContainer = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.innerText = message;

    // Append the toast to the container
    toastContainer.appendChild(toast);

    // Automatically remove the toast after 4 seconds
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 4000);
  }

  // Function to display an error message (similar to the success message)
  function displayErrorMessage(message) {
    // Implement similar to displaySuccessMessage
    const messageContainer = document.getElementById("message-container"); // Make sure you have this container in your HTML
    const errorMessageElement = document.createElement("div");
    errorMessageElement.textContent = message;
    errorMessageElement.classList.add("error-message"); // Add any classes for styling the message
    messageContainer.appendChild(errorMessageElement);

    // Optionally, remove the message after some time
    setTimeout(() => {
      messageContainer.removeChild(errorMessageElement);
    }, 2000); // Remove after 2 seconds
  }

  function displayErrorToast(message) {
    const toastContainer = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = 'toast';
    toast.innerText = message;

    // Append the toast to the container
    toastContainer.appendChild(toast);

    // Automatically remove the toast after 4 seconds
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 4000);
  }

  // send update to server
  async function sendUpdate(userId, found, userName) {
    const url = "/status/update-found-status";
    const drillId = new Date().toISOString().replace(/-/g, "").substring(0, 8); // Default drill ID in yyyymmdd format
    console.log("url is", url);
    console.log(
      "Updating status for user",
      userName,
      "to",
      found,
      "for drill",
      drillId
    );
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: userId,
          drill_id: parseInt(drillId, 10),
          found: found,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response;
    } catch (error) {
      console.error("There was an error!", error);
    }
  }

  // Example function to handle checkbox change
  function handleFoundCheckbox(userId, isChecked) {
    // Send the found status to the server
    fetch("/update-found-status", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ userId, found: isChecked }),
    })
      .then((response) => {
        // handle the response
      })
      .catch((error) => {
        // handle any errors
      });
  }

</script>

<style>
  table {
    width: 100%;
    border-collapse: collapse;
  }

  table,
  th,
  td {
    border: 2px double #ddd; /* Double lines for grid */
  }

  th,
  td {
    padding: 8px;
    text-align: left;
  }

  th {
    background-color: #f2f2f2;
    position: sticky;
    top: 0;
    z-index: 1;
  }

  th:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: inherit;
    backdrop-filter: blur(5px);
    z-index: -1;
  }

  tr:hover {
    background-color: #e8e8e8; /* Highlight on hover */
  }
  .circle-button {
    display: block;
    width: 50px;
    height: 50px;
    margin-bottom: 20px;
    border-radius: 50%;
    overflow: hidden;
    padding: 0;
    border: none;
    box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
  }

  .circle-button:hover {
    transform: translateY(-5px);
    box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3);
  }

  .circle-button img {
    width: 100%;
    height: auto;
    display: block;
  }

  .update-button-contaner {
    text-align: center;
    items-align: center;
  }

  .centered-button {
    display: block;
    margin: 20px auto;
    font-size: 20px;
    width: auto;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    background-color: #a7c7e7; /* Example background color */
    border: none; /* Example border removal */
    cursor: pointer; /* Changes the cursor on hover */
    transition: background-color 0.3s; /* Smooth background color transition on hover */
  }

  .refresh-button {
    display: block;
    margin: 20px auto;
    font-size: 20px;
    width: auto;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    background-color: #a7c7e7; /* Example background color */
    border: none; /* Example border removal */
    cursor: pointer; /* Changes the cursor on hover */
    transition: background-color 0.3s; /* Smooth background color transition on hover */
  }

  /* This is a class to format the date, we'll add it in the <td> tag */
  .iso-date {
    white-space: nowrap; /* Prevents wrapping */
  }
  .toast {
  background-color: #04AA6D; /* Green background */
  color: white; /* White text color */
  padding: 16px; /* Some padding */
  border-radius: 8px; /* Rounded corners */
  margin-top: 10px; /* Space between toasts */
  animation: fadeinout 4s;
}

@keyframes fadeinout {
  0%, 100% { opacity: 0; }
  10%, 90% { opacity: 1; }
}

/* Style for the container div */
.table-title {
  display: flex;
  align-items: center;
  justify-content: space-between; /* This will space the children evenly */
  padding: 20px; /* Add some padding around */
  flex-wrap: wrap; /* If you want the items to wrap on small screens */
}

/* Style for the buttons and dropdown for consistent sizing */
/* .table-title > button, */
.table-title > select,
.table-title > .title {
  margin: 0 10px; /* Adds margin to left and right for spacing */
  padding: 10px; /* Padding inside buttons and dropdown */
  flex: 1; /* Allows items to grow */
  text-align: center; /* Center the text inside (if it's one line) */
}

/* If you have a title or something similar, you might not want it to grow like buttons */
.table-title > .title {
  flex: none; /* Prevents the title from growing and only takes up necessary space */
}

/* Further style your select (dropdown) element if needed */
.table-title > select {
  cursor: pointer; /* To indicate it's a dropdown */
}

/* Add additional styling for buttons if necessary */
.table-title > button {
  cursor: pointer; /* Indicates the element is clickable */
  border: 1px solid #ccc; /* Adds a border */
  background-color: #f8f8f8; /* Adds a background color */
}

/* Styling for the filter dropdown */
select #departmentFilter {
  width: 200px; /* Set the width as per your preference */
  font-size: 1.2em; /* Larger text for better readability */
  padding: 10px 15px; /* Adjust padding to make the dropdown taller and text more centered */
  margin: 0 10px; /* Maintain some space around the dropdown */
  border: 1px solid #ddd; /* Border to match the overall design */
  border-radius: 5px; /* Rounded corners for modern look */
  cursor: pointer; /* Change cursor on hover to signify this is a dropdown */
}

/* You may also want to style the option elements */
select #departmentFilter option {
  font-size: 1.2em; /* Ensure the options text is also larger */
}


/* Responsive behavior for smaller screens */
@media (max-width: 768px) {
  .table-title > button,
  /* .table-title > select, */
  .table-title > .title {
    margin: 5px 0; /* Stack them with vertical space on small screens */
  }
}


</style>
