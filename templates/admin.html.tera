<html>
  <head>
    <title>Admin Dashboard</title>
    <script src="../static/js/helpers.js"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
      }

      h1,
      h2 {
        color: #333;
      }

      button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
      }

      button:hover {
        background-color: #0056b3;
      }

      table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
      }

      th,
      td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
      }

      th {
        background-color: #f2f2f2;
      }

      tr:nth-child(even) {
        background-color: #f9f9f9;
      }

      tr:hover {
        background-color: #ddd;
      }

      .confirmation-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
      }

      #toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
      }

      .toast {
        background-color: #333;
        color: #fff;
        padding: 10px 20px;
        margin-bottom: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
      }

      @keyframes fadein {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @keyframes fadeout {
        from {
          opacity: 1;
        }
        to {
          opacity: 0;
        }
      }

      section {
        margin-bottom: 40px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      section h2 {
        border-bottom: 1px solid #ccc;
        padding-bottom: 10px;
      }
    </style>
  </head>
  <body>
    <h1>Admin Dashboard</h1>
    <!-- clear cookies button execute function clearCookies()-->
    <button id="clear-cookies">Clear Cookies</button>

    <section>
      <h2>Pending Registrations</h2>
      <table>
        <tr>
          <th>Name</th>
          <th>Email</th>
          <th>Device ID</th>
          <th>Requested At</th>
          <th>Action</th>
        </tr>
        {% for reg in registrations %}
        <tr>
          <td>{{ reg.name }}</td>
          <td>{{ reg.email }}</td>
          <td>{{ reg.device_id }}</td>
          <td>{{ reg.created_at }}</td>
          <td>
            <button
              onclick="approveRegistration('{{ reg.id }}', '{{ reg.name }}', '{{
                reg.device_id
              }}')"
            >
              Approve
            </button>
          </td>
        </tr>
        {% endfor %}
      </table>
    </section>
    <section>
      <h2>Currently Authenticated Devices</h2>
      <table id="auth-devices-table">
        <tr>
          <th>Device ID</th>
          <th>Device Name</th>
          <th>User ID</th>
          <th>Authenticated At</th>
          <th>Action</th>
        </tr>
      </table>
    </section>

    <section>
      <h2>Users</h2>
      <table>
        <tr>
          <th>User ID</th>
          <th>Name</th>
          <th>Email</th>
          <th>Department ID</th>
          <th>Action</th>
        </tr>
        {% for user in users %}
        <tr id="user-{{ user.user_id }}">
          <td>{{ user.user_id }}</td>
          <td>
            <span id="name-{{ user.user_id }}">{{ user.name }}</span>
            <input
              type="text"
              id="edit-name-{{ user.user_id }}"
              value="{{ user.name }}"
              style="display: none"
            />
          </td>
          <td>
            <span id="email-{{ user.user_id }}">{{ user.email }}</span>
            <input
              type="text"
              id="edit-email-{{ user.user_id }}"
              value="{{ user.email }}"
              style="display: none"
            />
          </td>
          <td>
            <span id="dept_id-{{ user.user_id }}">{{ user.dept_id }}</span>
            <input
              type="text"
              id="edit-dept_id-{{ user.user_id }}"
              value="{{ user.dept_id }}"
              style="display: none"
            />
          </td>
          <td>
            <button onclick="editUser('{{ user.user_id }}')">Edit</button>
            <button
              onclick="saveUser('{{ user.user_id }}')"
              style="display: none"
            >
              Save
            </button>
            <button
              onclick="confirmAction('In', '{{ user.user_id }}', '{{
                user.name
              }}')"
            >
              Force Check-in
            </button>
            <button
              onclick="confirmAction('Out', '{{ user.user_id }}', '{{
                user.name
              }}')"
            >
              Force Check-out
            </button>
          </td>
        </tr>
        {% endfor %}
      </table>
      <!-- Confirmation Dialog -->
      <div
        id="confirmation-dialog"
        class="confirmation-dialog"
        style="display: none"
      >
        <p id="confirmation-message"></p>
        <button id="confirm-yes" onclick="handleConfirmation(true)">Yes</button>
        <button id="confirm-no" onclick="handleConfirmation(false)">No</button>
      </div>
    </section>

    <!-- Toast Container -->
    <div id="toast-container"></div>

    <script>
      console.log("Admin Dashboard loaded");
      // Fetch authenticated devices when the page loads
      window.onload = fetchAuthDevices;

      async function approveRegistration(registrationId, name, deviceId) {
        console.log(
          `clicked approve on id ${registrationId}, name ${name}, deviceId ${deviceId}`
        );
        try {
          const response = await fetch("/admin/approve_registration", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ device_id: deviceId, device_name: name }),
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }

          const data = await response.json();
          console.log("Success:", data);
        } catch (error) {
          console.error("Error:", error);
        }
        // refresh the page
        window.location.reload();
      }

      async function fetchAuthDevices() {
        try {
          const response = await fetch("/admin/auth_devices");
          const devices = await response.json();
          const table = document.getElementById("auth-devices-table");

          devices.forEach((device) => {
            const row = document.createElement("tr");

            const deviceIdCell = document.createElement("td");
            deviceIdCell.textContent = device.device_id;
            row.appendChild(deviceIdCell);

            const deviceNameCell = document.createElement("td");
            deviceNameCell.textContent = device.device_name;
            row.appendChild(deviceNameCell);

            const userIdCell = document.createElement("td");
            userIdCell.textContent = device.user_id;
            row.appendChild(userIdCell);

            const authAtCell = document.createElement("td");
            authAtCell.textContent = device.authenticated_at;
            row.appendChild(authAtCell);

            const actionCell = document.createElement("td");
            const deauthButton = document.createElement("button");
            deauthButton.textContent = "Deauthorize";
            deauthButton.onclick = () => deauthorizeDevice(device.device_id);
            actionCell.appendChild(deauthButton);
            row.appendChild(actionCell);

            table.appendChild(row);
          });
        } catch (error) {
          console.error("Error fetching authenticated devices:", error);
        }
      }

      async function deauthorizeDevice(deviceId) {
        const confirmed = confirm(
          "Are you sure you want to deauthorize this device?"
        );
        if (!confirmed) {
          return;
        }

        try {
          const response = await fetch("/admin/remove_auth_device", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ device_id: deviceId }),
          });

          if (response.ok) {
            console.log(`Device ${deviceId} deauthorized successfully.`);
            // Refresh the authenticated devices table
            fetchAuthDevices();
          } else {
            console.error("Failed to deauthorize device");
          }
        } catch (error) {
          console.error("Error deauthorizing device:", error);
        }
        // refresh
        window.location.reload();
      }

      function editUser(userId) {
        document.getElementById(`name-${userId}`).style.display = "none";
        document.getElementById(`email-${userId}`).style.display = "none";
        document.getElementById(`dept_id-${userId}`).style.display = "none";

        document.getElementById(`edit-name-${userId}`).style.display = "inline";
        document.getElementById(`edit-email-${userId}`).style.display =
          "inline";
        document.getElementById(`edit-dept_id-${userId}`).style.display =
          "inline";

        document.querySelector(
          `#user-${userId} button[onclick^="editUser"]`
        ).style.display = "none";
        document.querySelector(
          `#user-${userId} button[onclick^="saveUser"]`
        ).style.display = "inline";
      }

      function saveUser(userId) {
        let name = document.getElementById(`edit-name-${userId}`).value;
        let email = document.getElementById(`edit-email-${userId}`).value;
        let dept_id = parseInt(
          document.getElementById(`edit-dept_id-${userId}`).value,

          10
        );

        // Confirm changes
        if (
          confirm(
            `Save changes for User ${userId}?\nName: ${name}\nEmail: ${email}\nDept ID: ${dept_id}`
          )
        ) {
          // Perform AJAX request to update user data
          fetch(`/admin/update_user/${userId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name: name,
              email: email,
              dept_id: dept_id,
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                // Update the display with new values
                document.getElementById(`name-${userId}`).textContent = name;
                document.getElementById(`email-${userId}`).textContent = email;
                document.getElementById(`dept_id-${userId}`).textContent =
                  dept_id;

                document.getElementById(`name-${userId}`).style.display =
                  "inline";
                document.getElementById(`email-${userId}`).style.display =
                  "inline";
                document.getElementById(`dept_id-${userId}`).style.display =
                  "inline";

                document.getElementById(`edit-name-${userId}`).style.display =
                  "none";
                document.getElementById(`edit-email-${userId}`).style.display =
                  "none";
                document.getElementById(
                  `edit-dept_id-${userId}`
                ).style.display = "none";

                document.querySelector(
                  `#user-${userId} button[onclick^="editUser"]`
                ).style.display = "inline";
                document.querySelector(
                  `#user-${userId} button[onclick^="saveUser"]`
                ).style.display = "none";

                alert("User updated successfully");
              } else {
                alert("Failed to update user");
              }
            });
        }
      }

      function showToast(message) {
        // Create a toast element
        const toast = document.createElement("div");
        toast.className = "toast";
        toast.textContent = message;

        // Get the toast container and append the toast to it
        const toastContainer = document.getElementById("toast-container");
        toastContainer.appendChild(toast);

        // Remove the toast after 3 seconds
        setTimeout(() => {
          toast.remove();
        }, 3000);
      }

      let currentAction = null;
      let currentUserId = null;

      function confirmAction(action, userId, userName) {
        currentAction = action;
        currentUserId = userId;
        const message = `Are you sure you want to force ${
          action === "In" ? "In" : "Out"
        } for user: ${userName}?`;
        document.getElementById("confirmation-message").textContent = message;
        document.getElementById("confirmation-dialog").style.display = "block";
      }

      function handleConfirmation(confirm) {
        document.getElementById("confirmation-dialog").style.display = "none";
        if (confirm) {
          handleStatusUpdate(currentAction, currentUserId);
        }
        currentAction = null;
        currentUserId = null;
      }

      async function handleStatusUpdate(status, userId) {
        try {
          const responseData = await updateStatus(status, userId);
          showToast(`Status updated to ${status}`);
          return responseData;
        } catch (error) {
          showToast(error.message);
          console.error(error.message);
          throw error;
        }
      }

      // clear cookies function
      function clearCookies() {
        fetch("/clear-cookies", {
          method: "POST",
          credentials: "include",
        }).then((response) => {
          if (response.ok) {
            console.log("Cookies cleared");
            // Redirect to the home page
            window.location.href = "/";
          } else {
            console.error("Failed to clear cookies");
          }
        });
      }

      document
        .getElementById("clear-cookies")
        .addEventListener("click", clearCookies);
    </script>
  </body>
</html>
