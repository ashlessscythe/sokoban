<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Home</title>
    <link rel="stylesheet" href="../static/css/style.css" />
    <script src="../static/js/helpers.js"></script>
  </head>
  <body>
    <!-- Loader Container, initially hidden -->
    <div id="loader-container" style="display: none">
      <div class="loading-dots">Loading</div>
    </div>
    <div id="app-container">
      <div class="logo-container">
        <img src="../static/images/company_logo.jpg" alt="Company Logo" />
      </div>
      <div class="user-details-container">
        <form id="punchForm" class="form-container">
          <h2>Scan your badge</h2>
          <label for="userIdInput">Scan</label>
          <input
            class="user-input"
            type="password"
            id="userIdInput"
            name="user_id"
            placeholder="Enter User ID"
            required
            autofocus
          />
          <button class="big-button" type="submit">Scan</button>
        </form>
        <div id="statusMessage"></div>
        <!-- Placeholder for the message -->
        <div class="button-container">
          <ul class="horizontal-buttons">
            <li>
              <button
                class="block-button"
                onclick="navigateWithLoadingDots('/status/status_list')"
              >
                List
              </button>
            </li>
            <li>
              <button
                class="block-button"
                onclick="navigateWithLoadingDots('/status/checklist')"
              >
                Checklist<br />(InProgress)
              </button>
            </li>
            <li>
              <button
                class="block-button"
                onclick="navigateWithLoadingDots('/register')"
              >
                Register
              </button>
            </li>
          </ul>
        </div>
      </div>
    </div>

    <script>
      // import fn to clean input
      setInputClearTimer("#userIdInput", 3000);
      document
        .getElementById("punchForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault();
          // show loading dots
          showLoader();
          const userInput = document.getElementById("userIdInput");
          const userId = extractUserId(userInput.value);
          const messageDiv = document.getElementById("statusMessage");

          try {
            const userResponse = await fetch(
              `/user/${encodeURIComponent(userId)}`
            );

            if (userResponse.status === 400) {
              messageDiv.textContent = "User not found.";
              userInput.value = "";
              return;
            }

            if (!userResponse.ok) {
              userInput.value = "";
              messageDiv.textContent = `Error fetching user details: ${userResponse.statusText}`;
              return;
            }

            const userData = await userResponse.json();
            const userName = userData.name;

            const fetchPunchCount = await fetch(
              `/punch/${encodeURIComponent(userId)}/count`
            );
            if (!fetchPunchCount.ok) {
              messageDiv.textContent =
                "Error fetching punch count: " + fetchPunchCount.statusText;
              return;
            }

            const punchResponse = await fetch(
              `/punch/${encodeURIComponent(userId)}/last_punch`
            ).then((res) => {
              hideLoader();
              return res;
            });
            if (!punchResponse.ok) {
              messageDiv.textContent =
                "Error fetching punch details: " + punchResponse.statusText;
              return;
            }

            const punchData = await punchResponse.json();
            const userStatus = punchData.in_out;
            const punchCount = await fetchPunchCount.json();

            cancelInputClearTimer();

            // set countdown higher for newbies
            let time = punchCount <= 5 ? 7 : 3;
            console.log("punchCount", punchCount);

            const oppositeStatus = userStatus === "In" ? "Out" : "In";
            initiateCountdownAndStatusUpdate(
              userName,
              userStatus,
              oppositeStatus,
              userId,
              time
            );
          } catch (error) {
            console.error("Fetch error:", error);
            messageDiv.textContent = "Network error: Please try again later.";
          }
        });

      async function initiateCountdownAndStatusUpdate(
        userName,
        userStatus,
        oppositeStatus,
        userId,
        timeoutSeconds = 4
      ) {
        // hide punchform
        document.getElementById("punchForm").style.display = "none";
        const messageDiv = document.getElementById("statusMessage");

        messageDiv.innerHTML = `
        <img src="https://source.unsplash.com/random?cat" alt="Random Cat Image" style="width: 150px; height: 150px; border-radius: 50%; object-fit: cover; display: block; margin: 0 auto;">
        <h2>Hello, ${userName}.<br>You're currently: ${
          userStatus || "No status"
        }.
          <p id="countdown">Checking you &#8658; <span style="border: 2px solid black; padding: 5px;">${oppositeStatus}</span>: ...${timeoutSeconds}...</>
        </h2>
        <button class="block-button" onclick="window.location.href='/'">Cancel</button>
    `;

        const countdownElement = document.getElementById("countdown");
        let countdown = timeoutSeconds;
        const interval = setInterval(() => {
          countdown -= 1;
          countdownElement.innerHTML = `Checking you &#8658; <span style="border: 2px solid black; padding: 5px;">${oppositeStatus}</span>: ...${countdown}...`;

          if (countdown <= 0) {
            clearInterval(interval);
            updateStatus(oppositeStatus, userId);
          }
        }, 1000);
      }

      async function updateStatus(status, userId) {
        const messageDiv = document.getElementById("statusMessage");
        let punchUrl = `/punch/${encodeURIComponent(userId)}`;

        try {
          const punchResponse = await fetch(punchUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ in_out: status }),
          });

          if (punchResponse.ok) {
            messageDiv.innerHTML = `<p>Status updated to ${status}. Reloading...</p>`;
            setTimeout(() => {
              window.location.reload();
            }, 3000);
          } else {
            messageDiv.innerHTML = `<p>Failed to update status. Please try again.</p>`;
          }
        } catch (error) {
          console.error("Fetch error:", error);
          messageDiv.innerHTML = `<p>Network error: Please try again later.</p>`;
        }
      }
    </script>
  </body>

  <!-- More forms or buttons to interact with other API endpoints -->
</html>

<style>
  .form-container {
    display: flex;
    flex-direction: column;
    width: 300px; /* Adjust the width as needed */
  }
  .form-container label,
  .form-container input,
  .form-container button {
    margin-bottom: 10px; /* Space between form elements */
  }

  .img-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 150px;
    height: 150px;
    border-radius: 50%;
    overflow: hidden;
  }

  .img-container img {
    width: 100%;
    height: 100%;
    object-fit: contain; /* Ensures aspect ratio is maintained */
  }

  .button-container {
    width: 100%;
    text-align: center;
  }

  ul.horizontal-buttons {
    list-style-type: none; /* Removes bullet points */
    padding: 0; /* Removes default padding */
    display: flex;
    justify-content: center; /* Aligns the buttons to the center */
    gap: 10px; /* Optional: adds some space between the buttons */
  }

  li.horizontal-buttons {
    display: inline-block; /* Align items horizontally */
    margin-right: 10px; /* Optional: adds some space between the buttons */
  }

  .logo-container {
    position: absolute;
    top: 0;
    left: 0;
    padding: 10px;
  }

  .logo-container img {
    width: 150px; /* Adjust the width as needed */
    height: auto;
  }
</style>
